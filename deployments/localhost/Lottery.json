{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subcriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "intervalTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__InsufficentAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpened",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNoNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "LotteryPickWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerHistory",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntervalTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6605e1ef2060362a0d2173e23c423969db2100ca6830dacda97d0d3a1b33baa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1230766",
    "logsBloom": "0x
    "blockHash": "0xb9c6b80123a1e6138e50b817b73454fd10cd1ce78fa1c6c554949f9ea62f09b4",
    "transactionHash": "0xe6605e1ef2060362a0d2173e23c423969db2100ca6830dacda97d0d3a1b33baa",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1230766",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    500000,
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "4691fbfc4a0c93be314deba39ea34fba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subcriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"intervalTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__InsufficentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNoNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"LotteryPickWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerHistory\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntervalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"Chainlink Keeper\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {AutomationCompatible} from \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\n\\nerror Lottery__InsufficentAmount();\\nerror Lottery__TransferFailed();\\nerror Lottery__NotOpened();\\nerror Lottery__UpkeepNoNeeded(uint256 balance, uint256 players, uint256 lotteryState);\\n\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatible{\\n\\n    modifier insufficentFund() {\\n        if(msg.value < i_entranceFee) revert Lottery__InsufficentAmount();\\n        _;\\n    }       \\n\\n    modifier lotteryState() {\\n        if(s_lotteryState != LotteryState.OPEN){\\n            _;\\n            revert Lottery__NotOpened();\\n            _;\\n        }\\n    }\\n\\n    enum LotteryState {\\n        OPEN, CALCULATING\\n    }\\n\\n    address payable[] private s_player;\\n    LotteryState private s_lotteryState;\\n    uint256 private s_lastTimestamp;\\n\\n    uint256 private immutable i_entranceFee;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoondinator;\\n    uint64 private immutable s_subcriptionId;\\n    bytes32 private immutable i_keyHash;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint256 private immutable i_intervalTime;\\n\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n\\n    address private s_recentWinner;\\n\\n    event LotteryEnter(address indexed player);\\n    event LotteryPickWinner(uint256 indexed requestId);\\n    event WinnerHistory(address indexed winner);\\n\\n    constructor(uint64 subcriptionId, address vrfCoordinatorV2,uint256 entranceFee, \\n    bytes32 keyHash, uint32 callbackGasLimit, uint256 intervalTime) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoondinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        s_subcriptionId = subcriptionId;\\n        i_keyHash = keyHash;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimestamp = block.timestamp;\\n        i_intervalTime = intervalTime;\\n    } \\n\\n    function enterLottery() public payable insufficentFund lotteryState(){\\n        s_player.push(payable(msg.sender));\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n/** \\n * @dev Chainlink Keeper\\n */\\n\\n    function checkUpkeep(bytes memory /*checkData*/) public view override returns(bool upkeepNeeded, bytes memory /*performData*/){\\n            bool isOpen = (LotteryState.OPEN == s_lotteryState);\\n            bool isPassed  = block.timestamp - s_lastTimestamp  > i_intervalTime;\\n            bool hasPlayers = s_player.length >= 1;\\n            bool hasBalance = address(this).balance > 0;\\n            upkeepNeeded = isOpen && isPassed && hasPlayers && hasBalance;\\n            return (upkeepNeeded, ''); \\n    }\\n\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded,) = checkUpkeep('');\\n        if(!upkeepNeeded) revert Lottery__UpkeepNoNeeded(address(this).balance, s_player.length, uint256(s_lotteryState));\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoondinator.requestRandomWords(\\n            i_keyHash,\\n            s_subcriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS);\\n            emit LotteryPickWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_player.length; // modulo \\n        address payable recentWinner = s_player[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_player = new address payable[](0);\\n        s_lastTimestamp = block.timestamp;\\n        (bool success,) = recentWinner.call{value : address(this).balance}(\\\"\\\");\\n        if(!success) revert Lottery__TransferFailed();\\n        emit WinnerHistory(recentWinner);\\n    }\\n\\n    function getEntranceFee () public view returns(uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns(address) {\\n        return s_player[index];\\n    }\\n\\n    function getRecentWinner() public view returns(address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getNumWords() public pure returns(uint256){\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns(uint256) {\\n        return s_player.length;\\n    }\\n\\n    function getLastestTimestamp() public view returns(uint256) {\\n        return s_lastTimestamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns(uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getIntervalTime() public view returns(uint256) {\\n        return i_intervalTime;\\n    }\\n\\n    function getLotteryState() public view returns(LotteryState) {\\n        return s_lotteryState;\\n    }\\n}\\n\",\"keccak256\":\"0xeb6b1aa58e2cf9d0125bca5dae0dfc8e3f7a61cd2cb58ed42ad9ff38f8563cf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200187f3803806200187f833981810160405281019062000038919062000294565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508360a081815250508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508567ffffffffffffffff1660e08167ffffffffffffffff16815250508261010081815250508163ffffffff166101208163ffffffff16815250506000600160006101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600067ffffffffffffffff82169050919050565b620001528162000133565b81146200015e57600080fd5b50565b600081519050620001728162000147565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001a58262000178565b9050919050565b620001b78162000198565b8114620001c357600080fd5b50565b600081519050620001d781620001ac565b92915050565b6000819050919050565b620001f281620001dd565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000819050919050565b6200022d8162000218565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000161565b9650506020620002d789828a01620001c6565b9550506040620002ea89828a0162000201565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a0162000201565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114b0620003cf6000396000818161042801526106e1015260006105830152600061053f0152600061056001526000610503015260008181610340015261076401526000818161036601526103ba01526114b06000f3fe6080604052600436106100dd5760003560e01c806367f082b01161007f578063c1af578511610059578063c1af57851461029f578063e55ae4e8146102a9578063fa10c297146102e6578063fd6673f514610311576100dd565b806367f082b01461020b5780636b68c03c146102365780636e04ff0d14610261576100dd565b80634585e33b116100bb5780634585e33b14610161578063473f1ddc1461018a57806353a2c19a146101b55780635f1b0fd8146101e0576100dd565b806309bc33a7146100e25780631fe543e31461010d5780633c90246414610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c1f565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610dd3565b610364565b005b34801561014257600080fd5b5061014b610424565b6040516101589190610c1f565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190610e8a565b61044c565b005b34801561019657600080fd5b5061019f61063c565b6040516101ac9190610f18565b60405180910390f35b3480156101c157600080fd5b506101ca610666565b6040516101d79190610c1f565b60405180910390f35b3480156101ec57600080fd5b506101f5610675565b6040516102029190610c1f565b60405180910390f35b34801561021757600080fd5b50610220610682565b60405161022d9190610f50565b60405180910390f35b34801561024257600080fd5b5061024b610687565b6040516102589190610fe2565b60405180910390f35b34801561026d57600080fd5b50610288600480360381019061028391906110b2565b61069e565b604051610296929190611195565b60405180910390f35b6102a7610762565b005b3480156102b557600080fd5b506102d060048036038101906102cb91906111c5565b6108d1565b6040516102dd9190610f18565b60405180910390f35b3480156102f257600080fd5b506102fb610918565b6040516103089190610c1f565b60405180910390f35b34801561031d57600080fd5b50610326610922565b6040516103339190610c1f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040d9291906111f2565b60405180910390fd5b610420828261092e565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006104666040518060200160405280600081525061069e565b509050806104d55747600080549050600160009054906101000a900460ff16600181111561049757610496610f6b565b5b6040517f113fe1fe0000000000000000000000000000000000000000000000000000000081526004016104cc9392919061121b565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156104fa576104f9610f6b565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105c49594939291906112ad565b6020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190611315565b9050807f3d6ff93deac4edb8563b87c85672ee69ba90be40fc6d45b903fbbf8764c88b1360405160405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600381565b6000600160009054906101000a900460ff16905090565b600060606000600160009054906101000a900460ff1660018111156106c6576106c5610f6b565b5b600060018111156106da576106d9610f6b565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070e9190611371565b1190506000600160008054905010159050600080471190508380156107305750825b80156107395750815b80156107425750805b955085604051806020016040528060008152509550955050505050915091565b7f00000000000000000000000000000000000000000000000000000000000000003410156107bc576040517fe6393a5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107d0576107cf610f6b565b5b600160009054906101000a900460ff1660018111156107f2576107f1610f6b565b5b146108cf576000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a26040517f04fbadad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008082815481106108e6576108e56113a5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b6000808054905082600081518110610949576109486113a5565b5b602002602001015161095b9190611403565b90506000808281548110610972576109716113a5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff02191690836001811115610a0657610a05610f6b565b5b0217905550600067ffffffffffffffff811115610a2657610a25610c90565b5b604051908082528060200260200182016040528015610a545781602001602082028036833780820191505090505b5060009080519060200190610a6a929190610b5f565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9890611465565b60006040518083038185875af1925050503d8060008114610ad5576040519150601f19603f3d011682016040523d82523d6000602084013e610ada565b606091505b5050905080610b15576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fc658b10419eda65f48e1f88717e2d19b74f28a75d987560b9f8d46209de9765560405160405180910390a25050505050565b828054828255906000526020600020908101928215610bd8579160200282015b82811115610bd75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b7f565b5b509050610be59190610be9565b5090565b5b80821115610c02576000816000905550600101610bea565b5090565b6000819050919050565b610c1981610c06565b82525050565b6000602082019050610c346000830184610c10565b92915050565b6000604051905090565b600080fd5b600080fd5b610c5781610c06565b8114610c6257600080fd5b50565b600081359050610c7481610c4e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cc882610c7f565b810181811067ffffffffffffffff82111715610ce757610ce6610c90565b5b80604052505050565b6000610cfa610c3a565b9050610d068282610cbf565b919050565b600067ffffffffffffffff821115610d2657610d25610c90565b5b602082029050602081019050919050565b600080fd5b6000610d4f610d4a84610d0b565b610cf0565b90508083825260208201905060208402830185811115610d7257610d71610d37565b5b835b81811015610d9b5780610d878882610c65565b845260208401935050602081019050610d74565b5050509392505050565b600082601f830112610dba57610db9610c7a565b5b8135610dca848260208601610d3c565b91505092915050565b60008060408385031215610dea57610de9610c44565b5b6000610df885828601610c65565b925050602083013567ffffffffffffffff811115610e1957610e18610c49565b5b610e2585828601610da5565b9150509250929050565b600080fd5b60008083601f840112610e4a57610e49610c7a565b5b8235905067ffffffffffffffff811115610e6757610e66610e2f565b5b602083019150836001820283011115610e8357610e82610d37565b5b9250929050565b60008060208385031215610ea157610ea0610c44565b5b600083013567ffffffffffffffff811115610ebf57610ebe610c49565b5b610ecb85828601610e34565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f0282610ed7565b9050919050565b610f1281610ef7565b82525050565b6000602082019050610f2d6000830184610f09565b92915050565b600061ffff82169050919050565b610f4a81610f33565b82525050565b6000602082019050610f656000830184610f41565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610fab57610faa610f6b565b5b50565b6000819050610fbc82610f9a565b919050565b6000610fcc82610fae565b9050919050565b610fdc81610fc1565b82525050565b6000602082019050610ff76000830184610fd3565b92915050565b600080fd5b600067ffffffffffffffff82111561101d5761101c610c90565b5b61102682610c7f565b9050602081019050919050565b82818337600083830152505050565b600061105561105084611002565b610cf0565b90508281526020810184848401111561107157611070610ffd565b5b61107c848285611033565b509392505050565b600082601f83011261109957611098610c7a565b5b81356110a9848260208601611042565b91505092915050565b6000602082840312156110c8576110c7610c44565b5b600082013567ffffffffffffffff8111156110e6576110e5610c49565b5b6110f284828501611084565b91505092915050565b60008115159050919050565b611110816110fb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611150578082015181840152602081019050611135565b60008484015250505050565b600061116782611116565b6111718185611121565b9350611181818560208601611132565b61118a81610c7f565b840191505092915050565b60006040820190506111aa6000830185611107565b81810360208301526111bc818461115c565b90509392505050565b6000602082840312156111db576111da610c44565b5b60006111e984828501610c65565b91505092915050565b60006040820190506112076000830185610f09565b6112146020830184610f09565b9392505050565b60006060820190506112306000830186610c10565b61123d6020830185610c10565b61124a6040830184610c10565b949350505050565b6000819050919050565b61126581611252565b82525050565b600067ffffffffffffffff82169050919050565b6112888161126b565b82525050565b600063ffffffff82169050919050565b6112a78161128e565b82525050565b600060a0820190506112c2600083018861125c565b6112cf602083018761127f565b6112dc6040830186610f41565b6112e9606083018561129e565b6112f6608083018461129e565b9695505050505050565b60008151905061130f81610c4e565b92915050565b60006020828403121561132b5761132a610c44565b5b600061133984828501611300565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137c82610c06565b915061138783610c06565b925082820390508181111561139f5761139e611342565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140e82610c06565b915061141983610c06565b925082611429576114286113d4565b5b828206905092915050565b600081905092915050565b50565b600061144f600083611434565b915061145a8261143f565b600082019050919050565b600061147082611442565b915081905091905056fea264697066735822122086b34dcfa155c36c85767890d20ea2cbc3483e48cfed36461ee70b559c22966964736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c806367f082b01161007f578063c1af578511610059578063c1af57851461029f578063e55ae4e8146102a9578063fa10c297146102e6578063fd6673f514610311576100dd565b806367f082b01461020b5780636b68c03c146102365780636e04ff0d14610261576100dd565b80634585e33b116100bb5780634585e33b14610161578063473f1ddc1461018a57806353a2c19a146101b55780635f1b0fd8146101e0576100dd565b806309bc33a7146100e25780631fe543e31461010d5780633c90246414610136575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c1f565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190610dd3565b610364565b005b34801561014257600080fd5b5061014b610424565b6040516101589190610c1f565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190610e8a565b61044c565b005b34801561019657600080fd5b5061019f61063c565b6040516101ac9190610f18565b60405180910390f35b3480156101c157600080fd5b506101ca610666565b6040516101d79190610c1f565b60405180910390f35b3480156101ec57600080fd5b506101f5610675565b6040516102029190610c1f565b60405180910390f35b34801561021757600080fd5b50610220610682565b60405161022d9190610f50565b60405180910390f35b34801561024257600080fd5b5061024b610687565b6040516102589190610fe2565b60405180910390f35b34801561026d57600080fd5b50610288600480360381019061028391906110b2565b61069e565b604051610296929190611195565b60405180910390f35b6102a7610762565b005b3480156102b557600080fd5b506102d060048036038101906102cb91906111c5565b6108d1565b6040516102dd9190610f18565b60405180910390f35b3480156102f257600080fd5b506102fb610918565b6040516103089190610c1f565b60405180910390f35b34801561031d57600080fd5b50610326610922565b6040516103339190610c1f565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461041657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161040d9291906111f2565b60405180910390fd5b610420828261092e565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006104666040518060200160405280600081525061069e565b509050806104d55747600080549050600160009054906101000a900460ff16600181111561049757610496610f6b565b5b6040517f113fe1fe0000000000000000000000000000000000000000000000000000000081526004016104cc9392919061121b565b60405180910390fd5b60018060006101000a81548160ff021916908360018111156104fa576104f9610f6b565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105c49594939291906112ad565b6020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190611315565b9050807f3d6ff93deac4edb8563b87c85672ee69ba90be40fc6d45b903fbbf8764c88b1360405160405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600381565b6000600160009054906101000a900460ff16905090565b600060606000600160009054906101000a900460ff1660018111156106c6576106c5610f6b565b5b600060018111156106da576106d9610f6b565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261070e9190611371565b1190506000600160008054905010159050600080471190508380156107305750825b80156107395750815b80156107425750805b955085604051806020016040528060008152509550955050505050915091565b7f00000000000000000000000000000000000000000000000000000000000000003410156107bc576040517fe6393a5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107d0576107cf610f6b565b5b600160009054906101000a900460ff1660018111156107f2576107f1610f6b565b5b146108cf576000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a26040517f04fbadad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60008082815481106108e6576108e56113a5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b6000808054905082600081518110610949576109486113a5565b5b602002602001015161095b9190611403565b90506000808281548110610972576109716113a5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548160ff02191690836001811115610a0657610a05610f6b565b5b0217905550600067ffffffffffffffff811115610a2657610a25610c90565b5b604051908082528060200260200182016040528015610a545781602001602082028036833780820191505090505b5060009080519060200190610a6a929190610b5f565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9890611465565b60006040518083038185875af1925050503d8060008114610ad5576040519150601f19603f3d011682016040523d82523d6000602084013e610ada565b606091505b5050905080610b15576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fc658b10419eda65f48e1f88717e2d19b74f28a75d987560b9f8d46209de9765560405160405180910390a25050505050565b828054828255906000526020600020908101928215610bd8579160200282015b82811115610bd75782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b7f565b5b509050610be59190610be9565b5090565b5b80821115610c02576000816000905550600101610bea565b5090565b6000819050919050565b610c1981610c06565b82525050565b6000602082019050610c346000830184610c10565b92915050565b6000604051905090565b600080fd5b600080fd5b610c5781610c06565b8114610c6257600080fd5b50565b600081359050610c7481610c4e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cc882610c7f565b810181811067ffffffffffffffff82111715610ce757610ce6610c90565b5b80604052505050565b6000610cfa610c3a565b9050610d068282610cbf565b919050565b600067ffffffffffffffff821115610d2657610d25610c90565b5b602082029050602081019050919050565b600080fd5b6000610d4f610d4a84610d0b565b610cf0565b90508083825260208201905060208402830185811115610d7257610d71610d37565b5b835b81811015610d9b5780610d878882610c65565b845260208401935050602081019050610d74565b5050509392505050565b600082601f830112610dba57610db9610c7a565b5b8135610dca848260208601610d3c565b91505092915050565b60008060408385031215610dea57610de9610c44565b5b6000610df885828601610c65565b925050602083013567ffffffffffffffff811115610e1957610e18610c49565b5b610e2585828601610da5565b9150509250929050565b600080fd5b60008083601f840112610e4a57610e49610c7a565b5b8235905067ffffffffffffffff811115610e6757610e66610e2f565b5b602083019150836001820283011115610e8357610e82610d37565b5b9250929050565b60008060208385031215610ea157610ea0610c44565b5b600083013567ffffffffffffffff811115610ebf57610ebe610c49565b5b610ecb85828601610e34565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f0282610ed7565b9050919050565b610f1281610ef7565b82525050565b6000602082019050610f2d6000830184610f09565b92915050565b600061ffff82169050919050565b610f4a81610f33565b82525050565b6000602082019050610f656000830184610f41565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610fab57610faa610f6b565b5b50565b6000819050610fbc82610f9a565b919050565b6000610fcc82610fae565b9050919050565b610fdc81610fc1565b82525050565b6000602082019050610ff76000830184610fd3565b92915050565b600080fd5b600067ffffffffffffffff82111561101d5761101c610c90565b5b61102682610c7f565b9050602081019050919050565b82818337600083830152505050565b600061105561105084611002565b610cf0565b90508281526020810184848401111561107157611070610ffd565b5b61107c848285611033565b509392505050565b600082601f83011261109957611098610c7a565b5b81356110a9848260208601611042565b91505092915050565b6000602082840312156110c8576110c7610c44565b5b600082013567ffffffffffffffff8111156110e6576110e5610c49565b5b6110f284828501611084565b91505092915050565b60008115159050919050565b611110816110fb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611150578082015181840152602081019050611135565b60008484015250505050565b600061116782611116565b6111718185611121565b9350611181818560208601611132565b61118a81610c7f565b840191505092915050565b60006040820190506111aa6000830185611107565b81810360208301526111bc818461115c565b90509392505050565b6000602082840312156111db576111da610c44565b5b60006111e984828501610c65565b91505092915050565b60006040820190506112076000830185610f09565b6112146020830184610f09565b9392505050565b60006060820190506112306000830186610c10565b61123d6020830185610c10565b61124a6040830184610c10565b949350505050565b6000819050919050565b61126581611252565b82525050565b600067ffffffffffffffff82169050919050565b6112888161126b565b82525050565b600063ffffffff82169050919050565b6112a78161128e565b82525050565b600060a0820190506112c2600083018861125c565b6112cf602083018761127f565b6112dc6040830186610f41565b6112e9606083018561129e565b6112f6608083018461129e565b9695505050505050565b60008151905061130f81610c4e565b92915050565b60006020828403121561132b5761132a610c44565b5b600061133984828501611300565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137c82610c06565b915061138783610c06565b925082820390508181111561139f5761139e611342565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061140e82610c06565b915061141983610c06565b925082611429576114286113d4565b5b828206905092915050565b600081905092915050565b50565b600061144f600083611434565b915061145a8261143f565b600082019050919050565b600061147082611442565b915081905091905056fea264697066735822122086b34dcfa155c36c85767890d20ea2cbc3483e48cfed36461ee70b559c22966964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "Chainlink Keeper"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 269,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_player",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 272,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "1",
        "type": "t_enum(LotteryState)266"
      },
      {
        "astId": 274,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 295,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)266": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}